



https://leetcode.com/discuss/interview-question/1098081/famous-backtracking-problems



Solutions for 15 Famous Backtracking Problems in C++
Hello Leetcode, few weeks ago I found an amazing list of Backtracking problems in this same discuss section. I have solved all of it and would like to share my solutions here for everyone to see. If anyone has any doubts related to anything written here, kindly comment down. The sole motive of combining all the solutions under one article is to make everyone understand and find out patterns in these kind of problems.

The list I previously talked about: https://leetcode.com/list/5v3kl3d1

All the problems and solutions are in the same order as in the list.

Letter Combinations of a Phone Number
Link: https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution {
public:
    vector<string> ans;
    unordered_map<char, string> m;
    
    void backtrack(int p, string s, string d){
        if(s.size()==d.size()){
            ans.push_back(s);
            return;
        }
        for(int i=p;i<d.size();i++){
            char c=d[i];
            for(int j=0;j<m[c].size();j++){
                char ch=m[c][j];
                s.push_back(ch);
                backtrack(i+1, s, d);
                s.pop_back();
            }
        }
    }
    
    vector<string> letterCombinations(string digits) {
        string s="";
        m['2']="abc";
        m['3']="def";
        m['4']="ghi";
        m['5']="jkl";
        m['6']="mno";
        m['7']="pqrs";
        m['8']="tuv";
        m['9']="wxyz";
        if(digits.size()==0)
            return ans;
        backtrack(0, s, digits);
        return ans;
    }
};
Generate Parentheses
Link: https://leetcode.com/problems/generate-parentheses/
class Solution {
public:
    
    vector<string> ans;
    
    void backtrack(int open, int close, string s, int n){
        if(s.size()==2*n){
            ans.push_back(s);
            return;
        }
        if(open<n){
            s.push_back('(');
            backtrack(open+1, close, s, n);
            s.pop_back();
        }
        if(close<open){
            s.push_back(')');
            backtrack(open, close+1, s, n);
            s.pop_back();
        }
    }
    
    vector<string> generateParenthesis(int n) {
        string s="";
        backtrack(0,0,s,n);
        return ans;
    }
};
Sudoku Solver
Link: https://leetcode.com/problems/sudoku-solver/
class Solution {
public:
   
    bool isValid(vector<vector<char>>& board, int r, int c, char ch){
        for(int i=0;i<9;i++){
            if(board[i][c]==ch)
                return false;
            if(board[r][i]==ch)
                return false;
            if(board[3*(r/3)+i/3][3*(c/3)+i%3]==ch)
                return false;
        }
        return true;
    }
    
    bool backtrack(vector<vector<char>>& board){
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board.size();j++){
                if(board[i][j]=='.'){
                    for(char c='1';c<='9';c++){
                        if(isValid(board,i,j,c)){
                            board[i][j]=c;
                            if(backtrack(board))
                                return true;
                            else
                                board[i][j]='.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    void solveSudoku(vector<vector<char>>& board) {
        backtrack(board);
    }
};
Combination Sum
Link: https://leetcode.com/problems/combination-sum/
class Solution {
public:

    void backtrack(vector<int>& cand, int start, int t,vector<int> temp, vector<vector<int>> &c){
        if(t<0)
            return;
        
        if(t==0)
            c.push_back((temp));
        
        for(int i=start; i<cand.size();i++){
            temp.push_back(cand[i]);
            backtrack(cand, i, t-cand[i],temp,  c);
            temp.pop_back();
            }
        
    }
                   
vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
       vector<vector<int>> ans;
    vector<int> temp;
    backtrack(candidates, 0, target,temp, ans);
     return ans;
    }
};
Combination Sum II
Link: https://leetcode.com/problems/combination-sum-ii/
class Solution {
public:
    
      void backtrack(vector<int>& cand, int start, int t,vector<int> temp, vector<vector<int>> &c){
        if(t<0)
            return;
        
        if(t==0)
            c.push_back((temp));
        
        for(int i=start; i<cand.size();i++){
            if(i>start && cand[i]==cand[i-1])
                continue;
            temp.push_back(cand[i]);
            backtrack(cand, i+1, t-cand[i],temp,  c);
            temp.pop_back();
            }
        
    }
         
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
    vector<int> temp;
        sort(candidates.begin(),candidates.end());
    backtrack(candidates, 0, target,temp, ans);
     return ans;
    }
};
Permutations
Link: https://leetcode.com/problems/permutations/
class Solution {
public:
    
    
   void backtrack(set<vector<int>> &t,vector<int> &ans, vector<int>& nums){
       if(ans.size()==nums.size())
           t.insert(ans);
       
      for(int i=0;i<nums.size();i++){
           if(find(ans.begin(),ans.end(),nums[i]) == ans.end()){
               ans.push_back(nums[i]);
               backtrack(t, ans, nums);
               ans.pop_back();
           }
       }
       
   }
    
    vector<vector<int>> permute(vector<int>& nums) {
       vector<vector<int>> t;
       vector<int> ans;
       backtrack(t, ans, nums);
       return t;
    }
};
Permutations II
Link: https://leetcode.com/problems/permutations-ii/
class Solution {
public:
     bool visit[9];
     void backtrack(set<vector<int>> &t, vector<int>& nums, int p){
       if(p==nums.size()){
          t.insert(nums);
           return;
       }
       
      for(int i=p;i<nums.size();i++){
               swap(nums[i],nums[p]);
               backtrack(t, nums, p+1);
               swap(nums[i],nums[p]);
           }
       
       
   }
    
    vector<vector<int>> permuteUnique(vector<int>& nums) {
      sort(nums.begin(),nums.end());
       set<vector<int>> t;
       vector<vector<int>> v;
       backtrack(t,nums, 0);
       for(auto it: t)
           v.push_back(it);
       return v; 
    }
};
N-Queens
Link: https://leetcode.com/problems/n-queens/
class Solution {
public:
    vector<vector<string>> ans;
    
    bool isValid(vector<string> &curr, int r, int c){
        for(int i=0;i<=r;i++){
            if(curr[i][c]=='Q')
                return false;
        }
        for(int i=r,j=c;i>=0 && j>=0;i--,j--){
            if(curr[i][j]=='Q')
                return false;
        }
        for(int i=r,j=c;i>=0 && j<curr.size();i--,j++){
            if(curr[i][j]=='Q')
                return false;
        }
        return true;
    }
    
    void backtrack(vector<string> &curr, int r){
        if(curr.size()==r){
            ans.push_back(curr);
            return;
        }
        for(int i=0;i<curr.size();i++){
            if(isValid(curr, r, i)){
                curr[r][i]='Q';
                backtrack(curr, r+1);
                curr[r][i]='.';
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<string> curr(n, string(n,'.'));
        backtrack(curr, 0);
        return ans;
    }
};
Combinations
Link: https://leetcode.com/problems/combinations/
class Solution {
public:
    
    void backtrack(vector<int> &t, vector<vector<int>> &ans, int st, int n, int k){
        if(t.size()==k)
        {
            ans.push_back(t);
            return;
        }
        
        for(int i=st;i<=n;i++){
            t.push_back(i);
            backtrack(t,ans,i+1,n,k);
            t.pop_back();
        }
    }
    
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> ans;
        if(n<k)
            return ans;
        vector<int> t;
        backtrack(t,ans,1,n,k);
        return ans;
    }
};
Subsets
Link: https://leetcode.com/problems/subsets/
class Solution {
public:
    
    void backtrack(int p, vector<int> &v, vector<int>& nums, vector<vector<int>> &ans){
       for(int i=p;i<nums.size();i++){
            v.push_back(nums[i]);
           ans.push_back(v);
            backtrack(i+1,v,nums,ans);
            v.pop_back();
        }
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
       vector<vector<int>> ans;
       vector<int> curr;
       ans.push_back(curr);
       backtrack(0,curr,nums,ans);
       return ans;
    }
};
Subsets II
Link: https://leetcode.com/problems/subsets-ii/
class Solution {
public:
    
    void backtrack(int p, vector<int>& nums, vector<int> &v, vector<vector<int>> &ans){
        for(int i=p;i<nums.size();i++){
            if((i>p) && nums[i]==nums[i-1]){
                continue;
            }
            v.push_back(nums[i]);
            ans.push_back(v);
            backtrack(i+1,nums,v,ans);
            v.pop_back();
        }
    }
    
    
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        vector<int> curr;
        ans.push_back(curr);
        backtrack(0,nums,curr,ans);
        return ans;
    }
};
Palindrome Partitioning
Link: https://leetcode.com/problems/palindrome-partitioning/
class Solution {
public:
    bool isPalindrome(string s, int low, int high) {
        while (low < high) {
            if (s[low++] != s[high--]) return false;
        }
        return true;
    }
    
    void backtrack(vector<vector<string>> &ans, vector<string> &t, int p, string &s){
        if(p==s.size())
            ans.push_back(t);
        for(int i=p;i<s.size();i++){
           if(isPalindrome(s,p,i)){
               t.push_back(s.substr(p,i-p+1));
               backtrack(ans,t,i+1,s);
               t.pop_back();
           }
        }
        
    }
    
    
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> t;
        backtrack(ans,t,0,s);
        return ans;
    }
};
Combination Sum III
Link: https://leetcode.com/problems/combination-sum-iii/
class Solution {
public:
    
    void backtrack(vector<vector<int>> &ans,vector<int> &t, int j, int k, int n){
        if(n==0 && t.size()==k){
            ans.push_back(t);
            return;
        }
        
        for(int i=j;i<=9;i++){
                t.push_back(i);
                backtrack(ans,t,i+1,k,n-i);
                t.pop_back();
        }  
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> t;
        backtrack(ans, t, 1, k,n);
        return ans;
    }
};
Target Sum
Link: https://leetcode.com/problems/target-sum/
class Solution {
public:
    int ans=0;
    
    void backtrack(int i, vector<int>& nums, long long sum, int S){
        if(i==nums.size()){
            if(S==sum)
            ans++;
        }
        else{
            backtrack(i+1, nums, sum+nums[i], S);
            backtrack(i+1, nums, sum-nums[i], S);
        }
        
    }
    
    int findTargetSumWays(vector<int>& nums, int S) {
        backtrack(0, nums, 0, S);
        return ans;
    }
};
Letter Case Permutation
Link: https://leetcode.com/problems/letter-case-permutation/
class Solution {
public:
    
    void backtrack(int p, vector<string> &ans, string s, string &S){
        if(S.size()==s.size()){
            ans.push_back(s);
            return;
        }
        for(int i=p;i<S.size();i++){
            if(isalpha(S[i])){
                s.push_back(tolower(S[i]));
                backtrack(i+1, ans, s, S);
                s.pop_back();
                s.push_back(toupper(S[i]));
                backtrack(i+1, ans, s, S);
                s.pop_back();
            }
            else{
                s.push_back(S[i]);
                backtrack(i+1, ans, s, S);
                s.pop_back();
            }
        }
    }
    
    vector<string> letterCasePermutation(string S) {
        string s="";
        vector<string> ans;
        backtrack(0, ans, s, S);
        return ans;
    }
};
