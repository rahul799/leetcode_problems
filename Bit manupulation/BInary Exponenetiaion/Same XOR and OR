https://www.interviewbit.com/test/d8fbd24449/?signature=BAhpA9DEBA%3D%3D--cc3ecbca3524bd1ae4a240efdbac377e17d155dc#/problem_2





If two numbers have same bitwise xor and or, their bitwise AND must be 0. This means that for every 
bit we are going to have three choices :  both 0, one 1, other 1.


https://www.youtube.com/watch?v=znovp2u2JSQ&ab_channel=InterviewBit


Calculating this using binary exponenetiation reduces the time complexity to log(A) from standard O(A) 

int expo(int a, int b, int mod){
    int ans = 1;
    
    while(b){
        if(b&1) ans = (ans*1ll*a)%mod;
            
            a = (a*1ll*a)%mod;
            
        b >>=1;
    }
    return ans;
    }


int Solution::solve(int A) {
    
    return expo (3, A, 1e9 + 7);
    
    
    
    
}
