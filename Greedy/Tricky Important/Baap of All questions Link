

https://leetcode.com/discuss/general-discussion/1105430/greedy-algorithms-powerful-guide



Problem 1: https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position/

class Solution {
public:
    int minCostToMoveChips(vector<int>& position) {
        long long q=0;
        long long w=0;
        long long e=0;
        for(int i=0;i<position.size();i++){
            if(position[i]%2==0){
                q++;
            }
            else{
                w++;
            }
        }
        e=min(q,w);
        return e;
    }
};
Problem 2: https://leetcode.com/problems/maximum-units-on-a-truck/

class Solution {
public:
    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
        vector<pair<int, int>> q;
        int w=0;
        int e=0;
        for(int i=0;i<boxTypes.size();i++){
            q.push_back({boxTypes[i][1], boxTypes[i][0]});
        }
        sort(q.begin(), q.end());
        for(int i=q.size()-1;i>=0;i--){
            w=q[i].second;
            if(truckSize>w){
                e+=q[i].first*w;
                truckSize-=w;
            }
            else{
                w=truckSize;
                e+=q[i].first*w;
                truckSize-=w;
            }
            if(truckSize==0){
                break;
            }
        }
        return e;
    }
};
Problem 3: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int q=0;
        int e=0;
        for(int i=1;i<prices.size();i++){
            q=prices[i-1];
            while(i<prices.size() && prices[i]>=prices[i-1]){
                i++;
            }
            e+=(prices[i-1]-q);
        }
        return e;
    }
};
Problem 4: https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/

class Solution {
public:
    vector<vector<int>> groupThePeople(vector<int>& groupSizes) {
        vector<vector<int>> q;
        unordered_map<int, vector<int>> e;
        for(int i=0;i<groupSizes.size();i++){
            e[groupSizes[i]].push_back(i);
            if(e[groupSizes[i]].size()==groupSizes[i]){
                q.push_back(e[groupSizes[i]]);
                e[groupSizes[i]].clear();
            }
        }
        return q;
    }
};
Problem 5: https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/

class Solution {
public:
    vector<vector<int>> restoreMatrix(vector<int>& rowSum, vector<int>& colSum) {
        vector<vector<int>> q;
        for(int i=0;i<rowSum.size();i++){
            vector<int> e;
            for(int j=0;j<colSum.size();j++){
                e.push_back(min(rowSum[i], colSum[j]));
                rowSum[i]-=e[e.size()-1];
                colSum[j]-=e[e.size()-1];
            }
            q.push_back(e);
        }
        return q;
    }
};
Problem 6: https://leetcode.com/problems/score-after-flipping-matrix/

class Solution {
public:
    int matrixScore(vector<vector<int>>& A) {
        for(int i=0;i<A.size();i++){
            if(A[i][0]==1){
                continue;
            }
            for(int j=0;j<A[i].size();j++){
                if(A[i][j]==0){
                    A[i][j]=1;
                }
                else{
                    A[i][j]=0;
                }
            }
        }
        for(int i=0;i<A[0].size();i++){
            int q=0;
            int w=0;
            for(int j=0;j<A.size();j++){
                if(A[j][i]==1){
                    q++;
                }
                else{
                    w++;
                }
            }
            if(w>q){
                for(int j=0;j<A.size();j++){
                    if(A[j][i]==1){
                        A[j][i]=0;
                    }
                    else{
                        A[j][i]=1;
                    }
                }
            }
        }
        
        int q=0;
        for(int i=0;i<A.size();i++){
            for(int j=0;j<A[i].size();j++){
                q+=pow(2, A[i].size()-j-1)*A[i][j];
            }
        }
        return q;
    }
};
Problem 7: https://leetcode.com/problems/construct-k-palindrome-strings/

class Solution {
public:
    bool canConstruct(string s, int k) {
        unordered_map<char, int> q;
        for(int i=0;i<s.length();i++){
            q[s[i]]++;
        }
        int e=0;
        for(auto z: q){
            if(z.second%2==1){
                e++;
            }
        }
        if(e>k || k>s.length()){
            return false;
        }
        return true;
    }
};
Problem 8: https://leetcode.com/problems/minimum-swaps-to-make-strings-equal/

class Solution {
public:
    int minimumSwap(string s1, string s2) {
        if(s1.length()!=s2.length()){
            return -1;
        }
        unordered_map<char, int> q;
        vector<char> w;
        vector<char> e;
        for(int i=0;i<s1.length();i++){
            if(s1[i]!=s2[i]){
                w.push_back(s1[i]);
                e.push_back(s2[i]);
            }
            q[s1[i]]++;
            q[s2[i]]++;
        }
        if(q['x']%2==1 || q['y']%2==1){
            return -1;
        }
        int l=0;
        int x1=0;
        int y1=0;
        int x2=0;
        int y2=0;
        for(int i=0;i<w.size();i++){
            if(w[i]=='x'){
                x1++;
            }
            if(w[i]=='y'){
                y1++;
            }
            if(e[i]=='x'){
                x2++;
            }
            if(e[i]=='y'){
                y2++;
            }
            
        }
        if(abs(x1-x2)!=abs(y1-y2) || abs(x1-x2)%2==1){
            return -1;
        }
        if(w.size()%2==1){
            return -1;
        }
        l+=abs(y1-y2)/2;
        int j=(y1+y2)/2-abs(y1-y2)/2;
        l+=(j/2)*2+(j%2)*2;
        return l;
    }
};
Problem 9: https://leetcode.com/problems/two-city-scheduling/

class Solution {
public:
    int twoCitySchedCost(vector<vector<int>>& costs) {
        vector<pair<int, pair<int, int>>> q;
        for(int i=0;i<costs.size();i++){
            q.push_back({abs(costs[i][0]-costs[i][1]), {costs[i][0], costs[i][1]}});
        }
        sort(q.begin(), q.end());
        int l=0;
        int r=0;
        int e=0;
        for(int i=q.size()-1;i>=0;i--){
            if(q[i].second.first>q[i].second.second && costs.size()>r*2){
                e+=q[i].second.second;
                r++;
            }
            else{
                if(costs.size()>l*2){
                    e+=q[i].second.first;
                    l++;
                }
                else{
                    e+=q[i].second.second;
                    r++;
                }
            }
        }
        return e;
    }
};
Problem 10: https://leetcode.com/problems/jump-game-ii/

class Solution {
public:
    int jump(vector<int>& nums) {
        int q=0;
        int e=1;
        if(nums.size()==1){
            return 0;
        }
        if(q+nums[q]+1>=nums.size()){
            return e;
        }
        for(int i=1;i<nums.size();i++){
            int l=nums[q];
            q=i;
            for(int j=i;j<i+l && j<nums.size();j++){
                if(j+nums[j]>=nums[q]+q){
                    q=j;
                }
            }
            i=q;
            e++;
            if(q+nums[q]+1>=nums.size()){
                break;
            }
        }
        return e;
    }
};
Problem 11: https://leetcode.com/problems/candy/

class Solution {
public:
    int candy(vector<int>& ratings) {
        int q=0;
        stack<pair<int, int>> e;
        for(int i=0;i<ratings.size();i++){
            if(e.size()==0){
                e.push({ratings[i], 1});
            }
            else{
                if(ratings[i]==e.top().first){
                    int j=0;
                    int l=0;
                    if(e.top().second<=1){
                        j=1-e.top().second;
                    }
                    while(e.size()>1){
                        q+=e.top().second;
                        q+=j;
                        if(e.size()==2){
                            l=e.top().second+j;
                        }
                        e.pop();
                    }
                    if(l>0 && l>=e.top().second){
                        q+=(l+1);
                    }
                    else{
                        q+=e.top().second;
                    }
                    e.pop();
                    e.push({ratings[i],1});
                }
                else{
                    if(ratings[i]>e.top().first){
                        int j=0;
                        int l=0;
                        int z=e.top().second;
                        if(e.top().second<=1){
                            j=1-e.top().second;
                        }
                        while(e.size()>1){
                            q+=e.top().second;
                            q+=j;
                            if(e.size()==2){
                                l=e.top().second+j;
                            }
                            e.pop();
                        }
                        if(l>0 && l>=e.top().second){
                            q+=(l+1);
                        }
                        else{
                            q+=e.top().second;
                        }
                        e.pop();
                        if(z>1){
                            e.push({ratings[i],z+1});
                        }
                        else{
                            e.push({ratings[i],2});
                        }
                    }
                    else{
                        if(e.top().second>1){
                            e.push({ratings[i], 1});
                        }
                        else{
                            e.push({ratings[i], e.top().second-1});
                        }
                    }
                }
            }
        }
        if(e.size()==0){
            return q;
        }
        int j=0;
        int l=0;
        if(e.top().second<=1){
            j=1-e.top().second;
        }
        while(e.size()>1){
            q+=e.top().second;
            q+=j;
            if(e.size()==2){
                l=e.top().second+j;
            }
            e.pop();
        }
        if(l>0 && l>=e.top().second){
            q+=(l+1);
        }
        else{
            q+=e.top().second;
        }
        e.pop();
        return q;
    }
};
Problem 12: https://leetcode.com/problems/minimum-initial-energy-to-finish-tasks/

class Solution {
public:
    int minimumEffort(vector<vector<int>>& tasks) {
        vector<vector<int>> q;
        int e=0;
        int l=0;
        for(int i=0;i<tasks.size();i++){
            q.push_back({tasks[i][1]-tasks[i][0], tasks[i][0], tasks[i][1]});
        }
        sort(q.begin(), q.end());
        reverse(q.begin(), q.end());
        for(int i=0;i<q.size();i++){
            if(q[i][2]>l){
                e+=(q[i][2]-l);
                l=q[i][2]-q[i][1];
            }
            else{
                l-=q[i][1];
            }
        }
        return e;
    }
};
