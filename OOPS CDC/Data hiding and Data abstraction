

Data hiding is encapsulating data, to avoid the risk of data modification by the user. Data abstraction is separation of implementation
from the actual use of the data. For eg. I create a list ADT with operations like add/remove. But I have a different main class where I 
play around with this list. My user need not know the detail implementation inside add/remove method in my ADT class, they should only know 
how to use it eg: return type and parameters and what it does. That is data abstraction. Similarly, while using the listADT, just in case he
doesn't change the instance variables original form, I lock my instance variable by making it private, but for his custom modification for his
own application, I also create getters and setters to access the instance variable. That is data hiding also encapsulation. Abstraction is a 
concept where encapsulation is actually a visible action. They are like two sides of a coin.



Data abstraction is defined by the idea that objects have characteristics, but also describe behavior. A clear example is how Interfaces are used to represent abstraction in Java, since provide the signature of
each method that any class which implement the interface should desing the methods behavior.
In the other side data hiding can be understand by the idea of encapsulation where a data estructure can be implement on a abstract class to 
delegate certain functionality to achieve the idea of a abstract data type

