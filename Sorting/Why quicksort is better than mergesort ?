
https://www.geeksforgeeks.org/quicksort-better-mergesort/#:~:text=Quick%20sort%20is%20an%20in,sort%20the%20advantage%20of%20space





Why quicksort is better than mergesort ?
Difficulty Level : Medium
Last Updated : 04 Jan, 2021
This a common question asked in DS interviews that despite of better worst case performance of quick sort, quicksort is considered better than mergesort. There are certain 
reasons due to which quicksort is better especially in case of arrays: 

Auxiliary Space : Mergesort uses extra space, quicksort requires little space and exhibits good cache locality. Quick sort is an in-place sorting algorithm. In-place sorting
means no 
additional storage space is needed to perform sorting. Merge sort requires a temporary array to merge the sorted arrays and hence it is not in-place giving Quick sort
the advantage of space.
Worst Cases : The worst case of quicksort O(n2) can be avoided by using randomized quicksort. It can be easily avoided with high probability by choosing the right pivot.
Obtaining an average case behavior by choosing right pivot element makes it improvise the performance and becoming as efficient as Merge sort.
Locality of reference : Quicksort in particular exhibits good cache locality and this makes it faster than merge sort in many cases like in virtual memory environment.
Merge sort is better for large data structures: Mergesort is a stable sort, unlike quicksort and heapsort, and can be easily adapted to operate on linked lists and very
large lists stored on slow-to-access media such as disk storage or network attached storage. Refer this for details
sorting image

The std::sort() function which is present in C++ STL is a hybrid sorting algorithm provides average and worst case time complexity of O(nlogn). The sorting algorithm which
it uses is called Introsort. 
