510. Inorder Successor in BST II


Add to List

Share
Given a node in a binary search tree, find the in-order successor of that node in the BST.

If that node has no in-order successor, return null.

The successor of a node is the node with the smallest key greater than node.val.

You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for Node:

class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
 

Follow up:

Could you solve it without looking up any of the node's values?



Successor = "after node", i.e. the next node in the inorder traversal, or the smallest node after the current one.


Predecessor = "before node", i.e. the previous node in the inorder traversal, or the largest node before the current one.



Time complexity :, where HH is the height of the tree. That means \mathcal{O}(\log N)O(logN) in the average case, and \mathcal{O}(N)O(N) in the worst case, 
where NN is the number of nodes in the tree.
Space complexity :  since no additional space is allocated during the calculation.




Algorithm

If the node has a right child, and hence its successor is somewhere lower in the tree. Go to the right once and then as many times to the left as you could. 
Return the node you end up with.

Node has no right child, and hence its successor is somewhere upper in the tree. Go up till the node that is left child of its parent. The answer is the 
parent.



class Solution {
public:
    Node* inorderSuccessor(Node* node) {
        // the successor is somewhere lower in the right subtree
        if (node->right) {
            node = node->right;
            while (node->left) node = node->left;
            return node;   
        }
        
        // the successor is somewhere upper in the tree
        while (node->parent && node == node->parent->right) node = node->parent;
        return node->parent;
    }
};
